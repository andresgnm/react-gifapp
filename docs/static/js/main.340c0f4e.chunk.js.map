{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAe5C,OACI,mCACA,sBAAMC,SAVW,SAAEC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMlB,SACI,uBACIO,KAAM,OACNC,MAAST,EACTU,SAlBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,e,+BCJnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAWH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcbM,GAda,4CAAH,sDCAPO,EAAc,SAAC,GAAwB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEtC,OACI,sBAAKc,UAAW,wCAAhB,UACI,qBAAKC,IAAQf,EAAMgB,IAAON,IAC1B,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECCX,SAAEA,GAAc,IAAD,EAEbd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAoBvC,OAbAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAQ,SAItB,CAACpB,IAIIqB,EDhB4BK,CAAc1B,GAAjCa,EALmB,EAKxBN,KAAaa,EALW,EAKXA,QAOxB,OACI,qCACI,qBAAIJ,UAAW,oCAAf,cAAsDhB,EAAtD,OACEoB,GAAW,mBAAGJ,UAAW,mCAAd,qBACb,qBAAKA,UAAY,YAAjB,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADGA,EAAIC,aEWxBgB,EA9BM,WAAM,MAIazC,mBAAU,CAAC,mBAJxB,mBAIhB0C,EAJgB,KAIJ3C,EAJI,KAUvB,OACI,qCACG,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBACA,6BAES2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAYA,GADLA,Y,MCnB/B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.340c0f4e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = ( e ) =>{\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( cats => [inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n        //console.log('Submit hecho')\r\n    }\r\n    return (\r\n        <>\r\n        <form onSubmit= {handleSubmit}>\r\n            <input \r\n                type= \"text\"\r\n                value = {inputValue}\r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async ( category ) => {\r\n    //Encode URI es para evitar los espacios que se teclen\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI (category) }&limit=10&api_key=riMHimcWewhP6lPOOllmgGrqUg6aac4F`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n   return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url} ) => {\r\n    \r\n    return (\r\n        <div className= \"card animate__animated animate__swing\">\r\n            <img src = { url } alt = {title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    \r\n    /*Custom hook\r\n        Forma de extraer logica de algun componente o logica que quiero reutilizar de forma sencilla   */\r\n       const { data:images, loading} = useFetchGifs( category );\r\n\r\n    // UseEfect lo que realiza esta funcion es que se ejecuta solamente cuanto es \r\n    //renderizado por primera vez gracias al arreglo de dependencias vacio\r\n    \r\n\r\n   \r\n    return (\r\n        <>\r\n            <h3 className =\"animate__animated animate__shakeX\" > {category} </h3>\r\n            { loading && <p className =\"animate__animated animate__flash\">Loading</p> }\r\n            <div className = \"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key = {img.id}\r\n                            {...img} //se envia como una propiedad independiente y lo hace mas facil de trabajar\r\n                        />\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n\r\n\r\nexport const useFetchGifs = ( category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () =>{\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading:false\r\n                });\r\n\r\n        } ) // o .then ( img => {setState()})\r\n    },[category])\r\n\r\n    \r\n\r\n    return state;\r\n}\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n\r\n    const [categories, setCategories] = useState( ['Rick and Morty'])\r\n    \r\n    //const handleAdd = () => {\r\n       // //setCategories(['Flash', ..categories]),\r\n        //setCategories([...categories, 'Flash']);\r\n    //}\r\n    return (\r\n        <>\r\n           <h2>GifExpertApp</h2>\r\n           <AddCategory setCategories = {setCategories}/>\r\n           <hr></hr>\r\n           <ol>\r\n               { \r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                        key = {category}\r\n                        category = {category} \r\n                        />\r\n                    )) \r\n                }\r\n           </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n//rafc\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n//https://es.reactjs.org/docs/faq-structure.html\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}